// define of legal instructions
#include <iostream>
#include <string>
#include <cassert>
#include <set>


#include "ila++.h"

#include "helpers.hpp"

using namespace ila;

#include "encoding.hpp"

unsigned legalMatch [52] = {0x63,0x1063,0x4063,0x5063,0x6063,0x7063,0x67,0x6f,0x37,0x17,0x13,0x1013,0x2013,0x3013,0x4013,0x5013,0x40005013,0x6013,0x7013,0x33,0x40000033,0x1033,0x2033,0x3033,0x4033,0x5033,0x40005033,0x6033,0x7033,0x3,0x1003,0x2003,0x4003,0x5003,0x23,0x1023,0x2023,0xf,0x100f,0x73,0x100073,0x200073,0x10200073,0x30200073,0x12000073,0x10500073,0x1073,0x2073,0x3073,0x5073,0x6073,0x7073}; 
unsigned legalMask  [52] = {0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x7f,0x7f,0x7f,0x707f,0xfc00707f,0x707f,0x707f,0x707f,0xfc00707f,0xfc00707f,0x707f,0x707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfe007fff,0xffffffff,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f}; 
unsigned prevList   [52] = {0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x7f,0x7f,0x7f,0x707f,0xfc00707f,0x707f,0x707f,0x707f,0xfc00707f,0xfc00707f,0x707f,0x707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0xfe00707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfe007fff,0xffffffff,0x707f,0x707f,0x707f,0x707f,0x707f,0x707f}; 

                        
unsigned legalCSRAddr[] = {
            // ustatus, uie,  utvec, uscratch, uepc, ucause, utval,  uip
                0x000, 0x004, 0x005, 0x040,   0x041,  0x042,  0x043,  0x044,
            // sstatus, sedeleg, sideleg, sie, stvec, scounteren, sscratch,  sepc, scause, stval, sip, satp
                0x100, 0x102,   0x103, 0x104, 0x105, 0x106,       0x140,    0x141, 0x142, 0x143, 0x144, 0x180,    
            // mstatus, misa,  medeleg, mideleg, mtvec, mcounteren
                0x300,  0x301, 0x302,   0x304,   0x305, 0x306, 
            // mscratch, mepc, mcause, mtval, mip
                0x340, 0x341, 0x342, 0x343, 0x344
            };

            // return Nondet (but fixed), write raise fault
            // assume they are all machine level
unsigned ROCSR[] = {
            // mvendorid, marchid, mimpid, mhartid
              0xF11,       0xF12,  0xF13,  0xF14
            // 
            };

            // return nondet 
std::vector<range> CSRNotModelRW =  { {0x001,0x003, USER, false},  // floating points user
                                      {0xC00,0xC9F, USER, true} ,  // user counter/timers ro
                                      {0x3A0,0x3BF, MACHINE, false} // physical memory protection
                                       };

//------------- Some helper function for initialization -------------
                                       


ExprRef isNonDetCSRAddr(const ExprRef & idxBits);
ExprRef isNotModeledCSRAddr(const ExprRef & idxBits);
ExprRef isIlegalCSRAddr(const ExprRef & idxBits);
ExprRef isReadOnlyCSR(const ExprRef & idxBits);


CSRInfo_t CSRInfo = { CSRfield(,,,) };